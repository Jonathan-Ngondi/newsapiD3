apply plugin: 'com.android.application'

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    defaultConfig {
        applicationId "com.example.newsapid3"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "com.example.newsapid3.test.CustomTestRunner"
    }
    buildTypes {
        debug{
            buildConfigField 'String', 'API_KEY', "\"e320947657c74be096c0bb8fc2f79453\""
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility = '1.8'
        targetCompatibility = '1.8'
    }
}

dependencies {

    implementation "com.android.support:appcompat-v7:$supportLibraryVersion"
    implementation "com.android.support:support-media-compat:$supportLibraryVersion"
    implementation "com.android.support:support-v4:$supportLibraryVersion"
    implementation "com.android.support:design:$supportLibraryVersion"
    implementation "com.android.support:cardview-v7:$supportLibraryVersion"

    implementation project(':poweradapter')

    //Core Dagger classes and Android Injector Patterns + their Annotation Processors
    implementation "com.google.dagger:dagger:$daggerVersion"
    implementation "com.google.dagger:dagger-android-support:$daggerVersion"
    annotationProcessor "com.google.dagger:dagger-compiler:$daggerVersion"
    annotationProcessor "com.google.dagger:dagger-android-processor:$daggerVersion"
    //Retrofit (Network Calls) + Moshi (Serialization and Deserialization) and Moshi AutoValue (Serialization and Deserialization for AutoValue Objects)
    implementation "com.squareup.retrofit2:retrofit:$retrofitVersion"
    implementation "com.squareup.retrofit2:adapter-rxjava2:$retrofitVersion"
    implementation "com.squareup.retrofit2:converter-moshi:$retrofitVersion"
    implementation "com.squareup.moshi:moshi:$moshiVersion"
    annotationProcessor "com.ryanharter.auto.value:auto-value-moshi:$autoValueMoshiVersion"
    compileOnly "com.ryanharter.auto.value:auto-value-moshi-annotations:$autoValueMoshiVersion"
    //AutoValue itself (**no runtime dependencies**)
    compileOnly "com.google.auto.value:auto-value:$autoValueVersion"
    annotationProcessor "com.google.auto.value:auto-value:$autoValueVersion"
    //RxJava + RxRelays (No terminal events) for passing Observables around + RxBinding for observing user actions
    implementation "io.reactivex.rxjava2:rxjava:$rxJavaVersion"
    implementation "io.reactivex.rxjava2:rxandroid:$rxAndroidVersion"
    implementation "com.jakewharton.rxrelay2:rxrelay:$rxRelayVersion"
    implementation "com.jakewharton.rxbinding2:rxbinding:$rxBindingVersion"
    //Conductor (Yay no Fragments!)
    implementation "com.bluelinelabs:conductor:$conductorVersion"
    //ThreeTenForZonedDataTime
    implementation "com.jakewharton.threetenabp:threetenabp:$threeTenAbpVersion"
    //Logging
    implementation "com.jakewharton.timber:timber:$timberVersion"
    //ButterKnife
    implementation "com.jakewharton:butterknife:$butterKnifeVersion"
    annotationProcessor "com.jakewharton:butterknife-compiler:$butterKnifeVersion"
    //Glide (Image Loading)
    implementation "com.github.bumptech.glide:glide:$glideVersion"
    //Room (Database)
    implementation "android.arch.persistence.room:runtime:$archComponentsVersion"
    implementation "android.arch.persistence.room:rxjava2:$archComponentsVersion"
    annotationProcessor "android.arch.persistence.room:compiler:$archComponentsVersion"
    //Testing
    testImplementation "org.mockito:mockito-core:$mockitoVersion"
    testImplementation 'junit:junit:4.12'
    androidTestAnnotationProcessor "com.google.dagger:dagger-compiler:$daggerVersion"
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation "com.android.support.test:rules:1.0.2"
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
}

def mockCopySpec = copySpec {
    from rootProject.file("app/")
    include 'mock/'
}

task copyMock(type: Copy){
    ['src/debug/assets','src/test/resources', 'src/androidTest/resources', 'src/main/resources'].each { dest->
        copy{
            with mockCopySpec
            into dest
        }
    }
}

build.finalizedBy(copyMock)

